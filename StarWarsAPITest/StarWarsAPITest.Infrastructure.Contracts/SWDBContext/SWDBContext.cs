// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using StarWarsAPITest.Infrastructure.Contracts.DBEntities;

namespace StarWarsAPITest.Infrastructure.Contracts.SWDBContext
{
    public partial class SWDBContext : DbContext
    {
        public SWDBContext()
        {
        }

        public SWDBContext(DbContextOptions<SWDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DB_PlanetEntity> Planets { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=P-0501\\SQLEXPRESS;Initial Catalog=SWDB;Persist Security Info=True;User ID=jesus;Password=navarro");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DB_PlanetEntity>(entity =>
            {
                entity.Property(e => e.Climate).IsFixedLength();

                entity.Property(e => e.Name).IsFixedLength();

                entity.Property(e => e.OrbitalPeriod).IsFixedLength();

                entity.Property(e => e.Population).IsFixedLength();

                entity.Property(e => e.RotationPeriod).IsFixedLength();

                entity.Property(e => e.Url).IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}